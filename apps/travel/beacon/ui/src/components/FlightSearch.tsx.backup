'use client';

import { useState } from 'react';

interface FlightOption {
  airline: string;
  flight_number: string;
  departure_time: string;
  arrival_time: string;
  duration: string;
  price: number;
  stops: number;
  aircraft: string;
  booking_url: string;
  score: number;
  price_score: number;
  time_score: number;
  risk_score: number;
  reputation_score: number;
  flexibility_score: number;
}

interface FlightSearchResponse {
  search_id: string;
  origin: string;
  destination: string;
  departure_date: string;
  return_date?: string;
  passengers: number;
  class_type: string;
  flights: FlightOption[];
  total_results: number;
}

export default function FlightSearch() {
  const [searchData, setSearchData] = useState({
    origin: '[REDACTED]',
    destination: 'Hawaii',
    departure_date: '2025-10-03',
    return_date: '2025-10-24',
    passengers: 1,
    class_type: 'economy'
  });
  
  const [results, setResults] = useState<FlightSearchResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSearch = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/proxy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          agent: 'flights',
          action: 'search',
          ...searchData
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to search flights');
      }

      const data = await response.json();
      setResults(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBg = (score: number) => {
    if (score >= 80) return 'bg-green-100';
    if (score >= 60) return 'bg-yellow-100';
    return 'bg-red-100';
  };

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h2 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">‚úàÔ∏è Flight Search</h2>
        <p className="text-lg text-gray-600">Find the perfect flight for your journey</p>
      </div>
      
      {/* Search Form */}
      <div className="bg-white rounded-2xl shadow-lg p-8 mb-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div>
          <label className="block text-sm font-semibold text-gray-800 mb-3">
            From
          </label>
          <input
            type="text"
            value={searchData.origin}
            onChange={(e) => setSearchData({...searchData, origin: e.target.value})}
            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black transition-all duration-200 hover:border-gray-400"
            placeholder="Origin city"
          />
        </div>
        
        <div>
          <label className="block text-sm font-semibold text-gray-800 mb-3">
            To
          </label>
          <input
            type="text"
            value={searchData.destination}
            onChange={(e) => setSearchData({...searchData, destination: e.target.value})}
            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black transition-all duration-200 hover:border-gray-400"
            placeholder="Destination city"
          />
        </div>
        
        <div>
          <label className="block text-sm font-semibold text-gray-800 mb-3">
            Departure Date
          </label>
          <input
            type="date"
            value={searchData.departure_date}
            onChange={(e) => setSearchData({...searchData, departure_date: e.target.value})}
            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black transition-all duration-200 hover:border-gray-400"
          />
        </div>
        
        <div>
          <label className="block text-sm font-semibold text-gray-800 mb-3">
            Return Date
          </label>
          <input
            type="date"
            value={searchData.return_date}
            onChange={(e) => setSearchData({...searchData, return_date: e.target.value})}
            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black transition-all duration-200 hover:border-gray-400"
          />
        </div>
        
        <div>
          <label className="block text-sm font-semibold text-gray-800 mb-3">
            Passengers
          </label>
          <select
            value={searchData.passengers}
            onChange={(e) => setSearchData({...searchData, passengers: parseInt(e.target.value)})}
            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black transition-all duration-200 hover:border-gray-400"
          >
            {[1,2,3,4,5,6].map(num => (
              <option key={num} value={num}>{num}</option>
            ))}
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-semibold text-gray-800 mb-3">
            Class
          </label>
          <select
            value={searchData.class_type}
            onChange={(e) => setSearchData({...searchData, class_type: e.target.value})}
            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-black transition-all duration-200 hover:border-gray-400"
          >
            <option value="economy">Economy</option>
            <option value="premium">Premium Economy</option>
            <option value="business">Business</option>
            <option value="first">First Class</option>
          </select>
        </div>
        <div className="mt-8">
          <button
            onClick={handleSearch}
            disabled={loading}
            className="w-full bg-blue-600 text-white py-4 px-8 rounded-xl font-bold text-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
          >
            {loading ? 'üîç Searching...' : '‚úàÔ∏è Search Flights'}
          </button>
        </div>
      </div>

      {/* Error Message */}
      {error && (
        <div className="bg-red-50 border-l-4 border-red-400 text-red-700 px-6 py-4 rounded-r-xl shadow-lg">
          <div className="flex items-center">
            <span className="text-red-400 mr-3">‚ö†Ô∏è</span>
            <span className="font-medium">{error}</span>
          </div>
        </div>
      )}

      {/* Results */}
      {results && (
        <div className="space-y-6">
          <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6 shadow-lg">
            <div className="flex justify-between items-center">
              <h3 className="text-3xl font-bold text-blue-800">
                ‚úàÔ∏è Flight Results ({results.total_results} found)
              </h3>
              <span className="text-sm font-medium text-purple-600 bg-purple-100 px-4 py-2 rounded-full shadow-sm">
                ID: {results.search_id}
              </span>
            </div>
          </div>
          
          <div className="space-y-6">
            {results.flights.map((flight, index) => (
              <div key={index} className="bg-white border border-gray-200 rounded-2xl p-8 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 shadow-lg">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h4 className="text-xl font-bold text-blue-800">
                      {flight.airline} {flight.flight_number}
                    </h4>
                    <p className="text-blue-600 font-medium">{flight.aircraft}</p>
                  </div>
                  <div className="text-right">
                    <div className="text-3xl font-bold text-green-600">
                      ${flight.price.toFixed(2)}
                    </div>
                    <div className={`inline-block px-3 py-1 rounded-full text-sm font-bold ${getScoreBg(flight.score)} ${getScoreColor(flight.score)}`}>
                      Score: {flight.score.toFixed(1)}/100
                    </div>
                  </div>
                </div>
                
                <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-6">
                  <div className="bg-purple-50 rounded-xl p-4 text-center">
                    <p className="text-sm font-semibold text-purple-600 mb-1">Departure</p>
                    <p className="font-bold text-xl text-purple-800">{flight.departure_time}</p>
                  </div>
                  <div className="bg-orange-50 rounded-xl p-4 text-center">
                    <p className="text-sm font-semibold text-orange-600 mb-1">Arrival</p>
                    <p className="font-bold text-xl text-orange-800">{flight.arrival_time}</p>
                  </div>
                  <div className="bg-indigo-50 rounded-xl p-4 text-center">
                    <p className="text-sm font-semibold text-indigo-600 mb-1">Duration</p>
                    <p className="font-bold text-xl text-indigo-800">{flight.duration}</p>
                  </div>
                  <div className="bg-pink-50 rounded-xl p-4 text-center">
                    <p className="text-sm font-semibold text-pink-600 mb-1">Stops</p>
                    <p className="font-bold text-xl text-pink-800">{flight.stops === 0 ? 'Nonstop' : `${flight.stops} stop${flight.stops > 1 ? 's' : ''}`}</p>
                  </div>
                </div>
                
                {/* Score Breakdown */}
                <div className="bg-gray-50 rounded-2xl p-6 mb-6">
                  <h5 className="text-lg font-bold text-gray-800 mb-4 text-center">Flight Analysis</h5>
                  <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                    <div className="bg-white rounded-xl p-4 text-center shadow-sm">
                      <p className="text-sm font-bold text-red-600 mb-2">Price</p>
                      <p className={`font-bold text-2xl ${getScoreColor(flight.price_score)}`}>
                        {flight.price_score.toFixed(1)}
                      </p>
                    </div>
                    <div className="bg-white rounded-xl p-4 text-center shadow-sm">
                      <p className="text-sm font-bold text-blue-600 mb-2">Time</p>
                      <p className={`font-bold text-2xl ${getScoreColor(flight.time_score)}`}>
                        {flight.time_score.toFixed(1)}
                      </p>
                    </div>
                    <div className="bg-white rounded-xl p-4 text-center shadow-sm">
                      <p className="text-sm font-bold text-yellow-600 mb-2">Risk</p>
                      <p className={`font-bold text-2xl ${getScoreColor(flight.risk_score)}`}>
                        {flight.risk_score.toFixed(1)}
                      </p>
                    </div>
                    <div className="bg-white rounded-xl p-4 text-center shadow-sm">
                      <p className="text-sm font-bold text-green-600 mb-2">Reputation</p>
                      <p className={`font-bold text-2xl ${getScoreColor(flight.reputation_score)}`}>
                        {flight.reputation_score.toFixed(1)}
                      </p>
                    </div>
                    <div className="bg-white rounded-xl p-4 text-center shadow-sm">
                      <p className="text-sm font-bold text-purple-600 mb-2">Flexibility</p>
                      <p className={`font-bold text-2xl ${getScoreColor(flight.flexibility_score)}`}>
                        {flight.flexibility_score.toFixed(1)}
                      </p>
                    </div>
                  </div>
                </div>
                
                {/* Booking Button */}
                <div className="flex justify-center pt-4 border-t border-gray-200">
                  <a
                    href={flight.booking_url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="px-8 py-3 bg-blue-600 text-white font-bold text-lg rounded-xl hover:bg-blue-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl flex items-center space-x-2"
                  >
                    <span>üõ´</span>
                    <span>Book This Flight</span>
                  </a>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
